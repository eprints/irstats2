use strict;

use EPrints;
require HTML::Entities;

use Digest::MD5 qw(md5 md5_hex md5_base64);
use JSON;

my $session = new EPrints::Session;
return unless( defined $session );


my $cache_enabled = defined $session->config( 'irstats2', 'cache_enabled' ) ? $session->config( 'irstats2', 'cache_enabled' ) : 1 ;
# $cache_enabled = undef; # why disable?
my $cache_dir = $session->config( 'irstats2', 'cache_dir' ) || "/opt/eprints3/tmp";
##Views that is tested working with caching
my $cache_enabled_views = {
	"Table"=>1, 
	"Google::Graph"=>1,
	"Google::Spark"=>1,
	"Google::GeoChart"=>1,
	"Google::PieChart"=>1,
};

unless( $session->can_call( 'irstats2', 'allow' ) && $session->call( ['irstats2', 'allow'], $session, 'irstats2/view' ) )
{
	$session->get_request->status( 401 );
        $session->terminate;
        exit;
}

my $handler = $session->plugin( "Stats::Handler" );
unless(defined $handler)
{
        print STDOUT "<p>IRStats2: internal error (handler not available)</p>";
        $session->terminate();
        return;
}

my ($context, $params) = &get_context( $session, $handler );

my $view = $params->{view};

unless( defined $view )
{
	print STDOUT "<p>IRStats2: missing parameters in request.</p>";
	$session->terminate;
	return;
}

my $view_plugin = $session->plugin( "Stats::View::$view", 
		handler => $handler, 
		options => $params, 
		context => $context 
);

unless( defined $view_plugin )
{
	print STDOUT "<p>IRStats2: unknown view <strong>".HTML::Entities::encode( $view )."</strong></p>";
	$session->terminate;
	return;
}

if( defined $params->{export} )
{
	my $export_plugin = $session->plugin( "Stats::Export::".$params->{export} );
	if( defined $export_plugin )
	{
		$params->{export_plugin} = $export_plugin;
		$session->send_http_header( content_type => $export_plugin->mimetype );
		$view_plugin->export( $params );	
	}
}
else
{
	$session->send_http_header( content_type => $view_plugin->mimetype );


	my $container_id = $params->{container_id}||""; 
	my $cache = "$cache_dir/" .  get_hashname($session)  ;
	# if caching is disabled or if this search is already happening(locked) or the view is not cache enabled
	if( $cache_enabled == 0 || -f "$cache.lock" || not $cache_enabled_views->{$view}) 
	{
		$view_plugin->ajax( $context );
	}
	else
	{
		if( -f $cache ) # serve from cache
		{
			print `cat $cache |sed 's/irstats2_container_IDNUM/$container_id/g'`;
		}
		else # cache and serve
		{
			my $data = $view_plugin->ajax( $context );
			##replace irstats2_container_14902 with irstats2_container_IDNUM
			$data =~ s/$container_id/irstats2_container_IDNUM/g;

			`touch $cache.lock`;
			open(OUT,">$cache");
			binmode(OUT, ":utf8");
			print OUT $data;
			close OUT;
			`rm -f $cache.lock`;
		}
	}
}

$session->terminate;
return;


sub get_hashname
{	
	my ($session) = @_;

	my %none_hash_fields = map { $_ => 1 } @{ ["container_id" ] }; ## parameters to exclude from the md5 generation.
	my %_params;
	my @sparams = $session->param();
        foreach( @sparams )
        {
                my $val = $session->param( $_ );
                next if( !EPrints::Utils::is_set( $val ) || $none_hash_fields{$_} );
                $_params{$_} = $val;
        }
	$_params{'host'} = $session->config('host'); 
	my $sorted_params = JSON->new->canonical->encode( \%_params);
	return md5_hex( $sorted_params ).".ir2" ;

}


sub get_context
{
	my( $session, $handler ) = @_;

	my $context = $handler->context->from_request( $session );
	
	my %context_fields = map { $_ => 1 } @{ $context->fields || [] };

	my %params;

	my @sparams = $session->param();
	foreach( @sparams )
	{
		my $val = $session->param( $_ );
		# if there's no value, or it's a 'context' param, skip it.
		next if( !EPrints::Utils::is_set( $val ) || $context_fields{$_} );
		$params{$_} = $val if EPrints::Plugin::Stats::Utils::validate_non_context_param( $session, $_, $val );
	}
	return ( $context, \%params );
}
